from channels.db import database_sync_to_async
from channels.generic.websocket import AsyncWebsocketConsumer
import json
from .models import Room, Author, Message
from django.db import IntegrityError
from django.db.models import Count, Q



class ChatConsumer(AsyncWebsocketConsumer):
    @database_sync_to_async
    def Get_Room(self, room_id):
        try:
            room = Room.objects.get(pk=room_id)
            return room
        except Room.DoesNotExist:
            return None


    @database_sync_to_async
    def Get_Author(self, user):
        try:
            author = Author.objects.get(user = user)
            return author
        except Author.DoesNotExist:
            return None


    @database_sync_to_async
    def Save_Message(self, author, room, message):
        message_obj = Message.objects.create(
            author = author,
            room = room,
            context = message,
        )
        print(f"üíæ Saved message #{message_obj.id}: {message_obj.context} by {author.author_name}")
        return message_obj


    async def chat_message(self, event):
        author_name = event['author_name']
        message = event['message']

        await self.send(text_data=json.dumps({
            'author_name': author_name,
            'message': message,
            'source': 'room_broadcast',
        }))



# MAIN:
    async def connect(self):
        print("‚úÖ WebSocket client connected")
        #L·∫•y d·ªØ li·ªáu:
        data = self.scope['url_route']['kwargs']
        room_id = data.get('room_id')

        current_author = self.scope['user']
        if not current_author.is_authenticated:
            await self.close()
            return

        #L·∫•y ph√≤ng:
        room = await self.Get_Room(room_id)
        if room is None:
            await self.close()
            return

        #Thi·∫øt l·∫≠p cho ph√≤ng
        self.room = room
        self.room_group_name = "chat_%d" % room.pk
        print(f"üè† Connected to room: {self.room_group_name}")

        #ƒêƒÉng k√≠ ph√≤ng
        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )

        # K·∫øt n·ªëi WebSocket
        await self.accept()
        await self.send(text_data=json.dumps({"message": "K·∫øt n·ªëi th√†nh c√¥ng!"}))


    async def disconnect(self, close_code):
        # Ng·∫Øt k·∫øt n·ªëi
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name,
        )
        print("Client disconnected")


    async def receive(self, text_data):
        print(f"üîç Receive running in room: {getattr(self, 'room_group_name', '‚ùå None')}")
    # Nh·∫≠n message t·ª´ client
        data = json.loads(text_data)
        message = data.get("message", "")

        user = self.scope['user']
        if not user.is_authenticated:
            await self.close()
            return
        author = await self.Get_Author(user)

    # Chu·∫©n b·ªã d·ªØ li·ªáu message th√¥:
        name = user.username 
        if author and author.author_name:
            name = author.author_name        
        
        message_data = {
            'type': "chat_message",
            'author_name': name,
            'message': message,
        }

    # G·ª≠i message ƒë·∫øn nh√≥m ph√≤ng chat
        await self.channel_layer.group_send(
            self.room_group_name,
            message_data,
        )

        await self.Save_Message(author, self.room, message)
        print(f"üì© Message received from {name}: {message} in room {self.room_group_name}")
        




